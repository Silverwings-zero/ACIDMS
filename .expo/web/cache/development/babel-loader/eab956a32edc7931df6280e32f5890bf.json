{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { dbManager } from 'model/DBManager';\nimport Station from 'model/Station';\nimport Inventory from 'model/Inventory';\nimport Job from 'model/Job';\nvar EVENT_KEY = \"@event\";\n\nvar Event = function () {\n  function Event(id) {\n    _classCallCheck(this, Event);\n\n    this.id = id;\n  }\n\n  _createClass(Event, [{\n    key: \"init\",\n    value: function init() {\n      var data;\n      return _regeneratorRuntime.async(function init$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(dbManager.getEvent(this.id));\n\n            case 2:\n              data = _context.sent;\n\n              _extends(this, data.data());\n\n              return _context.abrupt(\"return\", this);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addJobToEvent\",\n    value: function addJobToEvent(jobId) {\n      return dbManager.getEventHandle(this.id).update({\n        \"jobs\": this.jobs.concat([jobId])\n      });\n    }\n  }, {\n    key: \"addStation\",\n    value: function addStation(station) {\n      return dbManager.getEventHandle(this.id).update({\n        stations: this.stations.concat(station.id)\n      });\n    }\n  }], [{\n    key: \"setInstance\",\n    value: function setInstance(id) {\n      return _regeneratorRuntime.async(function setInstance$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dbManager.setStorage(EVENT_KEY, id);\n              dbManager.getEventHandle(id).onSnapshot(update);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getInstance\",\n    value: function getInstance() {\n      var eventID, event;\n      return _regeneratorRuntime.async(function getInstance$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(dbManager.getStorage(EVENT_KEY));\n\n            case 2:\n              eventID = _context3.sent;\n              event = new Event(eventID);\n              _context3.next = 6;\n              return _regeneratorRuntime.awrap(event.init());\n\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, {\n    key: \"getAlerts\",\n    value: function getAlerts() {\n      var alerts = [];\n\n      if (globalEvent.alerts != undefined) {\n        Object.entries(globalEvent.alerts).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              key = _ref2[0],\n              value = _ref2[1];\n\n          alerts[alerts.length] = {\n            key: alerts.length,\n            name: key,\n            type: 'Push Notification',\n            rate: value\n          };\n        });\n      }\n\n      alerts.sort(function (a, b) {\n        if (a.rate == 'OFF' && b.rate == 'OFF') {\n          return a.key <= b.key ? -1 : 1;\n        }\n\n        if (a.rate == 'OFF') {\n          return 1;\n        }\n\n        if (b.rate == 'OFF') {\n          return -1;\n        }\n\n        return a.key <= b.key ? -1 : 1;\n      });\n      return alerts;\n    }\n  }, {\n    key: \"getNumOfAlerts\",\n    value: function getNumOfAlerts() {\n      var alerts = this.getAlerts();\n      var res = 0;\n      alerts.map(function (alert) {\n        if (alert.rate != 'OFF') {\n          res += 1;\n        }\n      });\n      return res;\n    }\n  }, {\n    key: \"getNumOfManagers\",\n    value: function getNumOfManagers() {\n      var res = 0;\n\n      if (globalEvent.managers != undefined) {\n        res = globalEvent.managers.length;\n      }\n\n      return res;\n    }\n  }]);\n\n  return Event;\n}();\n\nexport { Event as default };\n\nfunction update(data) {\n  globalEvent.id = data.id;\n\n  _extends(globalEvent, data.data());\n\n  Station.setStations(globalEvent.stations);\n  Inventory.setInventory(globalEvent.inventory);\n  Job.setJobs(globalEvent.jobs);\n}\n\nexport var globalEvent = new Event(\"\");","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/model/Event.js"],"names":["firebase","dbManager","Station","Inventory","Job","EVENT_KEY","Event","id","getEvent","data","jobId","getEventHandle","update","jobs","concat","station","stations","setStorage","onSnapshot","getStorage","eventID","event","init","alerts","globalEvent","undefined","Object","entries","map","key","value","length","name","type","rate","sort","a","b","getAlerts","res","alert","managers","setStations","setInventory","inventory","setJobs"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\nimport 'firebase/firestore';\nimport { dbManager } from 'model/DBManager';\nimport Station from 'model/Station';\nimport Inventory from 'model/Inventory';\nimport Job from 'model/Job';\n\nconst EVENT_KEY = \"@event\"\n\nexport default class Event {\n    id;             // String\n    name;           // String\n    inventory;      // String (id)\n    stations;       // List<String> (ids)\n    jobs;           // List<String> (ids)\n    managers;       // List<String> (ids)\n    alerts;         // Map<String, String>\n\n    constructor(id) {\n        this.id = id;\n    }\n\n    async init() {\n        var data = await dbManager.getEvent(this.id);\n        Object.assign(this, data.data());\n        return this;\n    }\n\n    static async setInstance(id) {\n        dbManager.setStorage(EVENT_KEY, id); // Not really used now that listeners are setup, to be deprecated\n        dbManager.getEventHandle(id).onSnapshot(update);\n    }\n\n    // To be deprecated, use globalEvent instead\n    static async getInstance() {\n        var eventID = await dbManager.getStorage(EVENT_KEY);\n        var event = new Event(eventID);\n        return await event.init();\n    }\n\n    static getAlerts() {\n        var alerts = [];\n        if (globalEvent.alerts != undefined){\n            Object.entries(globalEvent.alerts).map(([key, value]) => {\n                alerts[alerts.length] = {key: alerts.length, name: key, type: 'Push Notification', rate: value};\n            });\n        }\n        alerts.sort((a, b) => {\n            if (a.rate == 'OFF' && b.rate == 'OFF') {\n                return (a.key <= b.key) ? -1 : 1;\n            }\n            if (a.rate == 'OFF') {\n                return 1;\n            }\n            if (b.rate == 'OFF') {\n                return -1;\n            }\n            return (a.key <= b.key) ? -1 : 1;\n        });\n        return alerts;\n    }\n\n    static getNumOfAlerts() {\n        var alerts = this.getAlerts();\n        var res = 0;\n        alerts.map(alert => {\n            if (alert.rate != 'OFF') {\n                res += 1;\n            }\n        });\n        return res;\n    }\n\n    static getNumOfManagers() {\n        var res = 0;\n        if (globalEvent.managers != undefined) {\n            res = globalEvent.managers.length;\n        }\n        return res;\n    }\n\n    addJobToEvent(jobId) {\n        return dbManager.getEventHandle(this.id).update({\n            \"jobs\": this.jobs.concat([jobId])\n        });\n    }\n\n    addStation(station) {\n        return dbManager.getEventHandle(this.id).update({\n            stations: this.stations.concat(station.id)\n        });\n    }\n}\n\nfunction update(data) {\n    globalEvent.id = data.id;\n    Object.assign(globalEvent, data.data());\n    Station.setStations(globalEvent.stations);\n    Inventory.setInventory(globalEvent.inventory);\n    Job.setJobs(globalEvent.jobs);\n}\n\nexport var globalEvent = new Event(\"\");"]},"metadata":{},"sourceType":"module"}