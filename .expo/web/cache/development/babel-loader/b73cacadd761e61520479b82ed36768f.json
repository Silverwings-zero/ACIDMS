{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { dbManager } from 'model/DBManager';\nimport Drink from 'model/Drink';\nimport PairItem from 'model/PairItem';\nimport Runner from 'model/Runner';\nimport { globalStations } from 'model/Station';\nimport { globalEvent } from \"./Event\";\n\nvar Job = function () {\n  function Job(id) {\n    _classCallCheck(this, Job);\n\n    this.id = id;\n  }\n\n  _createClass(Job, null, [{\n    key: \"setJobs\",\n    value: function setJobs(ids) {\n      ids.map(function (id) {\n        dbManager.getJobHandle(id).onSnapshot(update);\n      });\n    }\n  }, {\n    key: \"getRunnerJobs\",\n    value: function getRunnerJobs(runnerId) {\n      var runnerTasks = [];\n      var jobs = getGlobalJobs();\n      jobs.map(function (job) {\n        if (job.runnerId == runnerId) {\n          var from = \"\",\n              to = \"\";\n\n          if (job.type == \"Transfer\") {\n            from = \"Inventory\";\n            to = \"Station \" + job.stationKey;\n          } else {\n            from = \"Station \" + job.stationKey;\n            to = \"Inventory\";\n          }\n\n          runnerTasks.push({\n            key: runnerTasks.length,\n            jobId: job.id,\n            item: job.drink.name,\n            from: from,\n            to: to,\n            status: job.status\n          });\n        }\n      });\n      runnerTasks.sort(function (a, b) {\n        return a.status <= b.status ? 1 : -1;\n      });\n      return runnerTasks;\n    }\n  }, {\n    key: \"getRunnerHistorySummary\",\n    value: function getRunnerHistorySummary(runnerId) {\n      var total = 0;\n      var pending = 0;\n      var jobs = getGlobalJobs();\n      jobs.map(function (job) {\n        if (job.runnerId == runnerId) {\n          total += 1;\n\n          if (job.status != \"Complete\" || job.status != \"Confirmed\") {\n            pending += 1;\n          }\n        }\n      });\n      return [total, pending];\n    }\n  }, {\n    key: \"getJobs\",\n    value: function getJobs() {\n      var tasks = [];\n      var jobs = getGlobalJobs();\n      jobs.map(function (job) {\n        var from = \"\",\n            to = \"\";\n\n        if (job.type == \"Transfer\") {\n          from = \"Inventory\";\n          to = \"Station \" + job.stationKey;\n        } else {\n          from = \"Station \" + job.stationKey;\n          to = \"Inventory\";\n        }\n\n        var runner = \"Unassigned\";\n\n        if (job.runnerId != \"\") {\n          runner = \"Runner \" + job.runner.key;\n        }\n\n        tasks.push({\n          key: tasks.length,\n          jobId: job.id,\n          stationKey: job.stationKey,\n          runner: runner,\n          drink: job.drink,\n          type: job.type,\n          item: job.drink.name,\n          from: from,\n          to: to,\n          status: job.status\n        });\n      });\n      tasks.sort(function (a, b) {\n        return a.status <= b.status ? 1 : -1;\n      });\n      return tasks;\n    }\n  }, {\n    key: \"getNumOfJobsInTransit\",\n    value: function getNumOfJobsInTransit(stationId) {\n      var jobs = getGlobalJobs();\n      var res = 0;\n      var qty = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        jobs.map(function (job) {\n          if (job.status == \"In transit\") {\n            res += 1;\n            qty += job.drink.quantity;\n            val += job.drink.quantity * job.drink.pricePerUnit;\n          }\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          jobs.map(function (job) {\n            if (job.stationKey == station.key && job.status == \"In transit\") {\n              res += 1;\n              qty += job.drink.quantity;\n              val += job.drink.quantity * job.drink.pricePerUnit;\n            }\n          });\n        }\n      }\n\n      return [res, qty, val];\n    }\n  }, {\n    key: \"getNumOfRunnerJobsPending\",\n    value: function getNumOfRunnerJobsPending(stationId) {\n      var jobs = getGlobalJobs();\n      var res = 0;\n      var qty = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        jobs.map(function (job) {\n          if (job.status == \"In transit\" || job.status == \"Unstarted\") {\n            res += 1;\n            qty += job.drink.quantity;\n            val += job.drink.quantity * job.drink.pricePerUnit;\n          }\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          jobs.map(function (job) {\n            if (job.stationKey == station.key && (job.status == \"In transit\" || job.status == \"Unstarted\")) {\n              res += 1;\n              qty += job.drink.quantity;\n              val += job.drink.quantity * job.drink.pricePerUnit;\n            }\n          });\n        }\n      }\n\n      return [res, qty, val];\n    }\n  }, {\n    key: \"getNumOfJobsPendingConfirmation\",\n    value: function getNumOfJobsPendingConfirmation(stationId) {\n      var jobs = getGlobalJobs();\n      var res = 0;\n      var qty = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        jobs.map(function (job) {\n          if (job.status == \"Complete\") {\n            res += 1;\n            qty += job.drink.quantity;\n            val += job.drink.quantity * job.drink.pricePerUnit;\n          }\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          jobs.map(function (job) {\n            if (job.stationKey == station.key && job.status == \"Complete\") {\n              res += 1;\n              qty += job.drink.quantity;\n              val += job.drink.quantity * job.drink.pricePerUnit;\n            }\n          });\n        }\n      }\n\n      return [res, qty, val];\n    }\n  }, {\n    key: \"getNumOfJobsPending\",\n    value: function getNumOfJobsPending(stationId) {\n      var jobs = getGlobalJobs();\n      var res = 0;\n      var qty = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        jobs.map(function (job) {\n          if (job.status != \"Confirmed\") {\n            res += 1;\n            qty += job.drink.quantity;\n            val += job.drink.quantity * job.drink.pricePerUnit;\n          }\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          jobs.map(function (job) {\n            if (job.stationKey == station.key && job.status != \"Confirmed\") {\n              res += 1;\n              qty += job.drink.quantity;\n              val += job.drink.quantity * job.drink.pricePerUnit;\n            }\n          });\n        }\n      }\n\n      return [res, qty, val];\n    }\n  }, {\n    key: \"getNumOfRequests\",\n    value: function getNumOfRequests(stationId) {\n      var jobs = getGlobalJobs();\n      var res = 0;\n      var qty = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        jobs.map(function (job) {\n          if (job.status == \"Unstarted\") {\n            res += 1;\n            qty += job.drink.quantity;\n            val += job.drink.quantity * job.drink.pricePerUnit;\n          }\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          jobs.map(function (job) {\n            if (job.stationKey == station.key && job.status == \"Unstarted\") {\n              res += 1;\n              qty += job.drink.quantity;\n              val += job.drink.quantity * job.drink.pricePerUnit;\n            }\n          });\n        }\n      }\n\n      return [res, qty, val];\n    }\n  }, {\n    key: \"getPendingJobsDetailedData\",\n    value: function getPendingJobsDetailedData() {\n      var returnListTotal = [];\n      var returnList = [];\n      var jobs = getGlobalJobs();\n      var count = 0;\n      jobs.map(function (job) {\n        if (job.status == 'Unstarted' || job.status == 'In transit') {\n          count = count + 1;\n          var drink = job.drink;\n          var index = returnListTotal.findIndex(function (item) {\n            return item.name == drink.name;\n          });\n\n          if (index == -1) {\n            returnListTotal[returnListTotal.length] = {\n              key: returnListTotal.length,\n              name: drink.name,\n              count: drink.quantity,\n              price: drink.pricePerUnit\n            };\n          } else {\n            returnListTotal[index].count += drink.quantity;\n          }\n\n          index = returnList.findIndex(function (item) {\n            return item.name == job.stationKey;\n          });\n\n          if (index == -1) {\n            var drinks = [{\n              key: 0,\n              name: drink.name,\n              count: drink.quantity,\n              price: drink.pricePerUnit\n            }];\n            returnList[returnList.length] = {\n              key: returnList.length,\n              name: job.stationKey,\n              items: drinks\n            };\n          } else {\n            var drinks = _toConsumableArray(returnList[index].items);\n\n            var drinkIndex = drinks.findIndex(function (item) {\n              return item.name == drink.name;\n            });\n\n            if (drinkIndex == -1) {\n              drinks[drinks.length] = {\n                key: drinks.length,\n                name: drink.name,\n                count: drink.quantity,\n                price: drink.pricePerUnit\n              };\n            } else {\n              drinks[drinkIndex].count += drink.quantity;\n            }\n\n            returnList[index] = _objectSpread(_objectSpread({}, returnList[index]), {}, {\n              items: drinks\n            });\n          }\n        }\n      });\n      return [returnListTotal, count];\n    }\n  }, {\n    key: \"getReturnJobsDetailedData\",\n    value: function getReturnJobsDetailedData() {\n      var returnListTotal = [];\n      var returnList = [];\n      var jobs = getGlobalJobs();\n      jobs.map(function (job) {\n        if (job.type == 'Return' && (job.status == 'Complete' || job.status == 'Confirmed')) {\n          var drink = job.drink;\n          var index = returnListTotal.findIndex(function (item) {\n            return item.name == drink.name;\n          });\n\n          if (index == -1) {\n            returnListTotal[returnListTotal.length] = {\n              key: returnListTotal.length,\n              name: drink.name,\n              count: drink.quantity,\n              price: drink.pricePerUnit\n            };\n          } else {\n            returnListTotal[index].count += drink.quantity;\n          }\n\n          index = returnList.findIndex(function (item) {\n            return item.name == job.stationKey;\n          });\n\n          if (index == -1) {\n            var drinks = [{\n              key: 0,\n              name: drink.name,\n              count: drink.quantity,\n              price: drink.pricePerUnit\n            }];\n            returnList[returnList.length] = {\n              key: returnList.length,\n              name: job.stationKey,\n              items: drinks\n            };\n          } else {\n            var drinks = _toConsumableArray(returnList[index].items);\n\n            var drinkIndex = drinks.findIndex(function (item) {\n              return item.name == drink.name;\n            });\n\n            if (drinkIndex == -1) {\n              drinks[drinks.length] = {\n                key: drinks.length,\n                name: drink.name,\n                count: drink.quantity,\n                price: drink.pricePerUnit\n              };\n            } else {\n              drinks[drinkIndex].count += drink.quantity;\n            }\n\n            returnList[index] = _objectSpread(_objectSpread({}, returnList[index]), {}, {\n              items: drinks\n            });\n          }\n        }\n      });\n      return [returnListTotal, returnList];\n    }\n  }, {\n    key: \"getNumOfReturnItems\",\n    value: function getNumOfReturnItems(stationId) {\n      var _this$getReturnJobsDe = this.getReturnJobsDetailedData(),\n          _this$getReturnJobsDe2 = _slicedToArray(_this$getReturnJobsDe, 2),\n          returnListTotal = _this$getReturnJobsDe2[0],\n          returnList = _this$getReturnJobsDe2[1];\n\n      var res = 0;\n      var val = 0;\n\n      if (stationId === undefined) {\n        returnListTotal.map(function (item) {\n          res += item.count;\n          val += item.count * item.price;\n        });\n      } else {\n        var station = globalStations[stationId];\n\n        if (station != undefined) {\n          var stationKey = station.key;\n          returnList.map(function (station) {\n            if (station.name == stationKey) {\n              station.items.map(function (item) {\n                res += item.count;\n                val += item.count * item.price;\n              });\n            }\n          });\n        }\n      }\n\n      return [res, val];\n    }\n  }, {\n    key: \"createNewJob\",\n    value: function createNewJob(drink, stationKey, pairItems, typeName) {\n      var job = {\n        type: typeName,\n        stationKey: stationKey,\n        status: \"Unstarted\",\n        drink: Drink.parseDrink(drink),\n        runnerId: \"\",\n        details: \"\"\n      };\n      items = pairItems.map(function (item) {\n        item = PairItem.parsePairItem(item);\n        item.quantity = drink.quantity;\n        return item;\n      });\n      dbManager.createNewJob(job, items).then(function (id) {\n        return globalEvent.addJobToEvent(id);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    }\n  }, {\n    key: \"updateJob\",\n    value: function updateJob(id, drink, status, runnerId) {\n      drink = Drink.parseDrink(drink);\n      dbManager.updateJob(id, drink, status, runnerId);\n    }\n  }]);\n\n  return Job;\n}();\n\nexport { Job as default };\n\nfunction update(data) {\n  var job;\n  return _regeneratorRuntime.async(function update$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          job = new Job(data.id);\n\n          _extends(job, data.data());\n\n          job.drink = new Drink(job.drink);\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(job.drink.init());\n\n        case 5:\n          dbManager.getPairItemsInJobHandle(job.id).onSnapshot(function _callee(pairItems) {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    job.pairItems = pairItems.docs.map(function (pairItem) {\n                      return new PairItem(pairItem.data());\n                    });\n                    _context.next = 3;\n                    return _regeneratorRuntime.awrap(Promise.all(job.pairItems.map(function (pairItem) {\n                      return pairItem.init();\n                    })));\n\n                  case 3:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n          if (!(job.runnerId != \"\")) {\n            _context2.next = 10;\n            break;\n          }\n\n          job.runner = new Runner(job.runnerId);\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(job.runner.init());\n\n        case 10:\n          globalJobs[job.id] = job;\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function getGlobalJobs() {\n  var res = [];\n\n  for (var id in globalJobs) {\n    res.push(globalJobs[id]);\n  }\n\n  return res;\n}\nexport var globalJobs = {};","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/model/Job.js"],"names":["dbManager","Drink","PairItem","Runner","globalStations","globalEvent","Job","id","ids","map","getJobHandle","onSnapshot","update","runnerId","runnerTasks","jobs","getGlobalJobs","job","from","to","type","stationKey","push","key","length","jobId","item","drink","name","status","sort","a","b","total","pending","tasks","runner","stationId","res","qty","val","undefined","quantity","pricePerUnit","station","returnListTotal","returnList","count","index","findIndex","price","drinks","items","drinkIndex","getReturnJobsDetailedData","pairItems","typeName","parseDrink","details","parsePairItem","createNewJob","then","addJobToEvent","catch","e","console","log","updateJob","data","init","getPairItemsInJobHandle","docs","pairItem","Promise","all","globalJobs"],"mappings":"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","sourcesContent":["import { dbManager } from 'model/DBManager';\nimport Drink from 'model/Drink';\nimport PairItem from 'model/PairItem';\nimport Runner from 'model/Runner';\nimport { globalStations } from 'model/Station';\nimport { globalEvent } from './Event';\n\nexport default class Job {\n    id;         // String\n    type;       // enum: { \"Transfer\", \"Return\" }\n    status;     // enum: { \"Unstarted\", \"In transit\", \"Complete\", \"Confirmed\" }\n    runner;     // runner\n    runnerId;   // String\n    details;    // String\n    stationKey;    // String\n    drink;     // Drink\n    pairItems;  // List<PairItems>\n\n    constructor(id) {\n        this.id = id;\n    }\n\n    static setJobs(ids) {\n        ids.map(id => {\n            dbManager.getJobHandle(id).onSnapshot(update);\n        })\n    }\n\n    static getRunnerJobs(runnerId) {\n        var runnerTasks = [];\n        var jobs = getGlobalJobs();\n        jobs.map(job => {\n            if (job.runnerId == runnerId) {\n                var [from, to] = [\"\", \"\"];\n                if (job.type == \"Transfer\") {\n                    from = \"Inventory\";\n                    to = \"Station \" + job.stationKey;\n                } else {\n                    from = \"Station \" + job.stationKey;\n                    to = \"Inventory\";\n                }\n                runnerTasks.push({key: runnerTasks.length, jobId: job.id, item: job.drink.name, from: from, to: to, status: job.status});\n            }\n        });\n        runnerTasks.sort((a, b) => {\n            return (a.status <= b.status) ? 1 : -1;\n        });\n        return runnerTasks;\n    }\n\n    static getRunnerHistorySummary(runnerId) {\n        var total = 0\n        var pending = 0\n        var jobs = getGlobalJobs();\n        jobs.map(job => {\n            if (job.runnerId == runnerId) {\n                total+=1\n                if (job.status != \"Complete\" || job.status != \"Confirmed\") {\n                    pending += 1\n                }\n            }\n        })\n        return [total, pending]\n    }\n\n    static getJobs() {\n        var tasks = [];\n        var jobs = getGlobalJobs();\n        jobs.map(job => {\n            var [from, to] = [\"\", \"\"];\n            if (job.type == \"Transfer\") {\n                from = \"Inventory\";\n                to = \"Station \" + job.stationKey;\n            } else {\n                from = \"Station \" + job.stationKey;\n                to = \"Inventory\";\n            }\n            var runner = \"Unassigned\";\n            if (job.runnerId != \"\") {\n                runner = \"Runner \" + job.runner.key;\n            }\n            tasks.push({key: tasks.length, jobId: job.id, stationKey: job.stationKey, runner: runner, drink: job.drink, type: job.type, item: job.drink.name, from: from, to: to, status: job.status});\n        });\n        tasks.sort((a, b) => {\n            return (a.status <= b.status) ? 1 : -1;\n        });\n        return tasks;\n    }\n\n    // Returns the number of in-transit jobs from/to station and their total qty/value based on stationId.\n    // Returns the total number of in-transit jobs and their total qty/value if stationId is omitted.\n    static getNumOfJobsInTransit(stationId) {\n        var jobs = getGlobalJobs();\n        var res = 0;\n        var qty = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            jobs.map(job => {\n                if (job.status == \"In transit\") {\n                    res += 1;\n                    qty += job.drink.quantity;\n                    val += job.drink.quantity * job.drink.pricePerUnit;\n                }\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                jobs.map(job => {\n                    if (job.stationKey == station.key && job.status == \"In transit\") {\n                        res += 1;\n                        qty += job.drink.quantity;\n                        val += job.drink.quantity * job.drink.pricePerUnit;\n                    }\n                });\n            }\n        }\n        return [res, qty, val];\n    }\n\n    // Returns the number of unstarted and in-transit jobs from/to station and their total qty/value based on stationId.\n    // Returns the total number of unstarted and in-transit jobs and their total qty/value if stationId is omitted.\n    static getNumOfRunnerJobsPending(stationId) {\n        var jobs = getGlobalJobs();\n        var res = 0;\n        var qty = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            jobs.map(job => {\n                if (job.status == \"In transit\" || job.status == \"Unstarted\") {\n                    res += 1;\n                    qty += job.drink.quantity;\n                    val += job.drink.quantity * job.drink.pricePerUnit;\n                }\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                jobs.map(job => {\n                    if (job.stationKey == station.key && (job.status == \"In transit\" || job.status == \"Unstarted\")) {\n                        res += 1;\n                        qty += job.drink.quantity;\n                        val += job.drink.quantity * job.drink.pricePerUnit;\n                    }\n                });\n            }\n        }\n        return [res, qty, val];\n    }\n\n    // Returns the number of Completed yet not confirmed jobs from/to station and their total qty/value based on stationId.\n    // Returns the total number of Completed yet not confirmed jobs and their total qty/value if stationId is omitted.\n    static getNumOfJobsPendingConfirmation(stationId) {\n        var jobs = getGlobalJobs();\n        var res = 0;\n        var qty = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            jobs.map(job => {\n                if (job.status == \"Complete\") {\n                    res += 1;\n                    qty += job.drink.quantity;\n                    val += job.drink.quantity * job.drink.pricePerUnit;\n                }\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                jobs.map(job => {\n                    if (job.stationKey == station.key && job.status == \"Complete\") {\n                        res += 1;\n                        qty += job.drink.quantity;\n                        val += job.drink.quantity * job.drink.pricePerUnit;\n                    }\n                });\n            }\n        }\n        return [res, qty, val];\n    }\n\n    // Returns the number of unconfirmed jobs from/to station and their total qty/value based on stationId.\n    // Returns the total number of unconfirmed jobs and their total qty/value if stationId is omitted.\n    static getNumOfJobsPending(stationId) {\n        var jobs = getGlobalJobs();\n        var res = 0;\n        var qty = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            jobs.map(job => {\n                if (job.status != \"Confirmed\") {\n                    res += 1;\n                    qty += job.drink.quantity;\n                    val += job.drink.quantity * job.drink.pricePerUnit;\n                }\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                //console.log(station.key)\n                jobs.map(job => {\n                    if (job.stationKey == station.key && job.status != \"Confirmed\") {\n                        res += 1;\n                        qty += job.drink.quantity;\n                        val += job.drink.quantity * job.drink.pricePerUnit;\n                    }\n                });\n            }\n        }\n        return [res, qty, val];\n    }\n\n    // Returns the number of unstarted jobs from/to station and their total qty/value based on stationId.\n    // Returns the total number of unstarted jobs and their total qty/value if stationId is omitted.\n    static getNumOfRequests(stationId) {\n        var jobs = getGlobalJobs();\n        var res = 0;\n        var qty = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            jobs.map(job => {\n                if (job.status == \"Unstarted\") {\n                    res += 1;\n                    qty += job.drink.quantity;\n                    val += job.drink.quantity * job.drink.pricePerUnit;\n                }\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                jobs.map(job => {\n                    if (job.stationKey == station.key && job.status == \"Unstarted\") {\n                        res += 1;\n                        qty += job.drink.quantity;\n                        val += job.drink.quantity * job.drink.pricePerUnit;\n                    }\n                });\n            }\n        }\n        return [res, qty, val];\n    }\n\n    static getPendingJobsDetailedData() {\n        var returnListTotal = [];\n        var returnList = [];\n        var jobs = getGlobalJobs();\n        var count = 0;\n        jobs.map(job => {\n            if (job.status == 'Unstarted' || job.status == 'In transit') {\n                count = count + 1;\n                var drink = job.drink;\n                var index = returnListTotal.findIndex(item => item.name == drink.name);\n                if (index == -1) {\n                    returnListTotal[returnListTotal.length] = {key: returnListTotal.length, name: drink.name, count: drink.quantity, price: drink.pricePerUnit};\n                } else {\n                    returnListTotal[index].count += drink.quantity;\n                }\n                index = returnList.findIndex(item => item.name == job.stationKey);\n                if (index == -1) {\n                    var drinks = [{key: 0, name: drink.name, count: drink.quantity, price: drink.pricePerUnit}];\n                    returnList[returnList.length] = {key: returnList.length, name: job.stationKey, items: drinks};\n                } else {\n                    var drinks = [...returnList[index].items];\n                    var drinkIndex = drinks.findIndex(item => item.name == drink.name);\n                    if (drinkIndex == -1) {\n                        drinks[drinks.length] = {key: drinks.length, name: drink.name, count: drink.quantity, price: drink.pricePerUnit};\n                    } else {\n                        drinks[drinkIndex].count += drink.quantity;\n                    }\n                    returnList[index] = {...returnList[index], items: drinks};\n                }\n            }\n        })\n        return [returnListTotal, count];\n    }\n\n    static getReturnJobsDetailedData() {\n        var returnListTotal = [];\n        var returnList = [];\n        var jobs = getGlobalJobs();\n        jobs.map(job => {\n            if (job.type == 'Return' && (job.status == 'Complete' || job.status == 'Confirmed')) {\n                var drink = job.drink;\n                var index = returnListTotal.findIndex(item => item.name == drink.name);\n                if (index == -1) {\n                    returnListTotal[returnListTotal.length] = {key: returnListTotal.length, name: drink.name, count: drink.quantity, price: drink.pricePerUnit};\n                } else {\n                    returnListTotal[index].count += drink.quantity;\n                }\n                index = returnList.findIndex(item => item.name == job.stationKey);\n                if (index == -1) {\n                    var drinks = [{key: 0, name: drink.name, count: drink.quantity, price: drink.pricePerUnit}];\n                    returnList[returnList.length] = {key: returnList.length, name: job.stationKey, items: drinks};\n                } else {\n                    var drinks = [...returnList[index].items];\n                    var drinkIndex = drinks.findIndex(item => item.name == drink.name);\n                    if (drinkIndex == -1) {\n                        drinks[drinks.length] = {key: drinks.length, name: drink.name, count: drink.quantity, price: drink.pricePerUnit};\n                    } else {\n                        drinks[drinkIndex].count += drink.quantity;\n                    }\n                    returnList[index] = {...returnList[index], items: drinks};\n                }\n            }\n        })\n        return [returnListTotal, returnList];\n    }\n\n    // Returns the number of returned items and their total value of station based on stationId.\n    // Returns the total number of returned items and their total value if stationId is omitted.\n    static getNumOfReturnItems(stationId) {\n        var [returnListTotal, returnList] = this.getReturnJobsDetailedData();\n        var res = 0;\n        var val = 0;\n        if (stationId === undefined) {\n            returnListTotal.map(item => { \n                res += item.count;\n                val += item.count * item.price;\n            });\n        } else {\n            var station = globalStations[stationId];\n            if (station != undefined) {\n                var stationKey = station.key;\n                returnList.map(station => {\n                    if (station.name == stationKey) {\n                        station.items.map(item => {\n                            res += item.count;\n                            val += item.count * item.price;\n                        });\n                    }\n                });\n            }\n        }\n        return [res, val];\n    }\n\n    static createNewJob(drink, stationKey, pairItems, typeName) {\n        const job = {\n            type: typeName,\n            stationKey: stationKey,\n            status: \"Unstarted\",\n            drink: Drink.parseDrink(drink),\n            runnerId: \"\",\n            details: \"\"\n        };\n        items = pairItems.map(item => {\n            item = PairItem.parsePairItem(item);\n            item.quantity = drink.quantity;\n            return item;\n        });\n        dbManager.createNewJob(job, items)\n            .then((id) => globalEvent.addJobToEvent(id))\n            .catch(e => console.log(e)); \n    }\n\n    static updateJob(id, drink, status, runnerId) {\n        drink = Drink.parseDrink(drink);\n        dbManager.updateJob(id, drink, status, runnerId);\n    }\n}\n\nasync function update(data) {\n    var job = new Job(data.id);\n    Object.assign(job, data.data());\n    job.drink = new Drink(job.drink);\n    await job.drink.init();\n    dbManager.getPairItemsInJobHandle(job.id).onSnapshot(async (pairItems) => {\n        job.pairItems = pairItems.docs.map(pairItem => new PairItem(pairItem.data()));\n        await Promise.all(job.pairItems.map(pairItem => pairItem.init()));\n    });\n    if (job.runnerId != \"\") {\n        job.runner = new Runner(job.runnerId);\n        await job.runner.init();\n    }\n    globalJobs[job.id] = job;\n}\n\nexport function getGlobalJobs() {\n    var res = [];\n    for (var id in globalJobs) {\n        res.push(globalJobs[id]);\n    }\n    return res;\n}\n\nexport var globalJobs = {};"]},"metadata":{},"sourceType":"module"}