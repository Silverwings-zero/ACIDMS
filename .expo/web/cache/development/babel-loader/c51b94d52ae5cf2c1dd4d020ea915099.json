{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/ManagerReturnInventoryScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport ReturnInventoryModal from 'components/ReturnInventoryModal';\nimport { getGlobalStations } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from 'model/Job';\n\nvar ManagerReturnInventoryScreen = function (_React$Component) {\n  _inherits(ManagerReturnInventoryScreen, _React$Component);\n\n  var _super = _createSuper(ManagerReturnInventoryScreen);\n\n  function ManagerReturnInventoryScreen() {\n    var _this;\n\n    _classCallCheck(this, ManagerReturnInventoryScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      inventorySelected: null,\n      scrollViewHeight: 0,\n      elementHeight: 0,\n      stationModalVisible: false,\n      stations: {},\n      drinks: [],\n      pairItems: [],\n      availableDrinkType: [],\n      curStation: null,\n      stationSelected: null,\n      totalValue: 0,\n      returnInventoryModalVisible: false\n    };\n    _this._scrollView1 = React.createRef();\n    return _this;\n  }\n\n  _createClass(ManagerReturnInventoryScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateData();\n    }\n  }, {\n    key: \"onDrinkBoxLayout\",\n    value: function onDrinkBoxLayout(event) {\n      this.setState({\n        elementHeight: event.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"onDrinkBoxPressed\",\n    value: function onDrinkBoxPressed(index) {\n      this.setState({\n        inventorySelected: index\n      });\n\n      this._scrollView1.current.scrollTo({\n        y: this.state.elementHeight * 1.1 * index - 0.3 * this.state.scrollViewHeight\n      });\n    }\n  }, {\n    key: \"onReturnInvModalSave\",\n    value: function onReturnInvModalSave(drink) {\n      var _this2 = this;\n\n      var selectedStation = this.state.stations[this.state.stationSelected];\n      var drinkToUpdate = selectedStation.drinks.find(function (drink) {\n        return drink.name === _this2.state.drinks[_this2.state.inventorySelected].name;\n      });\n      drinkToUpdate.subtract(drink);\n      selectedStation.updateDrink(drinkToUpdate);\n      Job.createNewJob(drink, this.state.stations[this.state.stationSelected].key, this.state.pairItems, \"Return\");\n      this.setState({\n        returnInventoryModalVisible: false,\n        inventorySelected: null,\n        stationSelected: null,\n        availableDrinkType: []\n      });\n      this.updateData();\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var stations = getGlobalStations();\n      var newStations = {};\n      var newTotalValue = 0;\n      stations.map(function (station) {\n        newTotalValue += station.getTotalValue();\n        newStations[station.key] = station;\n      });\n      this.setState({\n        drinks: globalInventory.drinks,\n        stations: newStations,\n        totalValue: newTotalValue\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        style: styles.container,\n        touchable: true,\n        onPress: function onPress() {\n          return _this3.setState({\n            inventorySelected: null,\n            stationSelected: null,\n            availableDrinkType: []\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, React.createElement(ReturnInventoryModal, {\n        ref: function ref(m) {\n          _this3.returnInventoryModal = m;\n        },\n        visible: this.state.returnInventoryModalVisible,\n        onSave: this.onReturnInvModalSave.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }\n      }), React.createElement(InventoryTopBox, {\n        return: true,\n        inventory: \"Return\",\n        touchable: true,\n        onPress: function onPress() {\n          return _this3.props.navigation.navigate(\"Return Inventory Detailed Data\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.scrollsContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }, Object.keys(this.state.stations).map(function (stationId, index) {\n        var station = _this3.state.stations[stationId];\n\n        if (station.deleted === true) {\n          return;\n        }\n\n        return React.createElement(StationBox, {\n          verb: \"Return from\",\n          key: index,\n          station: station,\n          totalValue: _this3.state.totalValue,\n          inventorySelected: _this3.state.stationSelected === station.key ? _this3.state.stationSelected : null,\n          greyed: _this3.state.stationSelected !== null && _this3.state.stationSelected !== station.key,\n          onPressStats: function onPressStats() {\n            _this3.setState({\n              stationSelected: station.key,\n              curStation: station,\n              availableDrinkType: station.drinks.map(function (drink) {\n                return drink.name;\n              })\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 37\n          }\n        });\n      }))), React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        onLayout: function onLayout(event) {\n          return _this3.setState({\n            scrollViewHeight: event.nativeEvent.layout.height\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        ref: this._scrollView1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, this.state.drinks.map(function (drink, index) {\n        var disabled = _this3.state.availableDrinkType.length == 0 || !_this3.state.availableDrinkType.includes(drink.name);\n\n        var onPress = function onPress() {\n          var station = _this3.state.stations[_this3.state.stationSelected];\n          var selectedDrink = station.findDrinkWithDrinkType(_this3.state.drinks[index].name);\n\n          _this3.returnInventoryModal.inputDrinkAndStation(selectedDrink, station.name);\n\n          _this3.setState({\n            returnInventoryModalVisible: true,\n            inventorySelected: index\n          });\n        };\n\n        return React.createElement(DrinkBox, {\n          key: index,\n          onPress: disabled ? null : onPress,\n          drink: drink,\n          greyed: disabled,\n          onLayout: _this3.onDrinkBoxLayout.bind(_this3),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 37\n          }\n        });\n      })))));\n    }\n  }]);\n\n  return ManagerReturnInventoryScreen;\n}(React.Component);\n\nexport { ManagerReturnInventoryScreen as default };\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f2f2f2',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  boldText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  iconBox: {\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    width: '80%',\n    height: '80%',\n    borderRadius: 15,\n    overflow: 'hidden',\n    resizeMode: 'contain'\n  },\n  scrollsContainer: {\n    height: '80%',\n    width: '90%',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/ManagerReturnInventoryScreen.js"],"names":["React","ScrollView","StationBox","DrinkBox","InventoryTopBox","ReturnInventoryModal","getGlobalStations","globalInventory","Job","ManagerReturnInventoryScreen","state","inventorySelected","scrollViewHeight","elementHeight","stationModalVisible","stations","drinks","pairItems","availableDrinkType","curStation","stationSelected","totalValue","returnInventoryModalVisible","_scrollView1","createRef","updateData","event","setState","nativeEvent","layout","height","index","current","scrollTo","y","drink","selectedStation","drinkToUpdate","find","name","subtract","updateDrink","createNewJob","key","newStations","newTotalValue","map","station","getTotalValue","styles","container","m","returnInventoryModal","onReturnInvModalSave","bind","props","navigation","navigate","scrollsContainer","width","alignItems","Object","keys","stationId","deleted","disabled","length","includes","onPress","selectedDrink","findDrinkWithDrinkType","inputDrinkAndStation","onDrinkBoxLayout","Component","StyleSheet","create","flex","backgroundColor","justifyContent","boldText","fontSize","fontWeight","iconBox","icon","borderRadius","overflow","resizeMode","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport ReturnInventoryModal from 'components/ReturnInventoryModal';\nimport { getGlobalStations } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from 'model/Job';\n\nexport default class ManagerReturnInventoryScreen extends React.Component {\n    state = {\n        inventorySelected: null,\n        scrollViewHeight: 0,\n        elementHeight: 0,\n        stationModalVisible: false,\n        stations: {},\n        drinks: [],\n        pairItems: [],\n        availableDrinkType: [],\n        curStation: null,\n        stationSelected: null,\n        totalValue: 0,\n        returnInventoryModalVisible: false,\n    };\n\n     _scrollView1 = React.createRef();\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    onDrinkBoxLayout(event) {\n        this.setState({elementHeight: event.nativeEvent.layout.height});\n    }\n\n    onDrinkBoxPressed(index) {\n        this.setState({inventorySelected: index});\n        this._scrollView1.current.scrollTo({\n            y: (this.state.elementHeight * 1.1) * index - 0.3 * this.state.scrollViewHeight\n        });\n    }\n\n    onReturnInvModalSave(drink) {\n        var selectedStation = this.state.stations[this.state.stationSelected];\n        var drinkToUpdate = selectedStation.drinks.find(drink => {\n            return drink.name === this.state.drinks[this.state.inventorySelected].name;\n        });\n        drinkToUpdate.subtract(drink);\n        selectedStation.updateDrink(drinkToUpdate);\n        Job.createNewJob(drink, this.state.stations[this.state.stationSelected].key, this.state.pairItems, \"Return\");\n        this.setState({\n            returnInventoryModalVisible: false,\n            inventorySelected: null,\n            stationSelected: null,\n            availableDrinkType: [],\n        });\n        this.updateData();\n    }\n\n    updateData() {\n        var stations = getGlobalStations();\n        var newStations = {};\n        var newTotalValue = 0;\n        stations.map(station => {\n            newTotalValue += station.getTotalValue();\n            newStations[station.key] = station;\n        });\n        this.setState({\n            drinks: globalInventory.drinks,\n            stations: newStations,\n            totalValue: newTotalValue\n        });\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                style={styles.container}\n                touchable\n                onPress={() => this.setState({\n                    inventorySelected: null,\n                    stationSelected: null,\n                    availableDrinkType: [],\n                })}>\n                <ReturnInventoryModal\n                    ref={m => {this.returnInventoryModal = m}}\n                    visible={this.state.returnInventoryModalVisible} \n                    onSave={this.onReturnInvModalSave.bind(this)} />\n                <InventoryTopBox return inventory={\"Return\"} touchable onPress={() => this.props.navigation.navigate(\"Return Inventory Detailed Data\")}/>\n                <View style={styles.scrollsContainer}>\n                    <View style={{width: '50%'}}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}>\n                            {Object.keys(this.state.stations).map((stationId, index) => {\n                                var station = this.state.stations[stationId];\n                                if (station.deleted === true) {\n                                    return;\n                                }\n                                return (\n                                    <StationBox\n                                        verb={\"Return from\"}\n                                        key={index}\n                                        station={station}\n                                        totalValue={this.state.totalValue}\n                                        inventorySelected={this.state.stationSelected === station.key ? this.state.stationSelected : null}\n                                        greyed={this.state.stationSelected !== null && this.state.stationSelected !== station.key}\n                                        onPressStats={() => {\n                                            this.setState({\n                                                stationSelected: station.key,\n                                                curStation: station,\n                                                availableDrinkType: station.drinks.map(drink => drink.name)\n                                            });\n                                        }}\n                                        />\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                    <View\n                        style={{width: '50%'}}\n                        onLayout={(event) => this.setState({scrollViewHeight: event.nativeEvent.layout.height})}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}\n                            ref={this._scrollView1}>\n                            {this.state.drinks.map((drink, index) => {\n                                var disabled = this.state.availableDrinkType.length == 0 || \n                                                !this.state.availableDrinkType.includes(drink.name);\n                                var onPress = () => {\n                                    var station = this.state.stations[this.state.stationSelected];\n                                    var selectedDrink = station.findDrinkWithDrinkType(this.state.drinks[index].name);\n                                    this.returnInventoryModal.inputDrinkAndStation(selectedDrink, station.name);\n                                    this.setState({\n                                        returnInventoryModalVisible: true,\n                                        inventorySelected: index\n                                    });\n                                };\n                                return (\n                                    <DrinkBox\n                                        key={index}\n                                        onPress={disabled ? null : onPress}\n                                        drink={drink}\n                                        greyed={disabled}\n                                        onLayout={this.onDrinkBoxLayout.bind(this)}/>\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#f2f2f2',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n    },\n    boldText: {\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    iconBox: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    icon: {\n        width: '80%',\n        height: '80%',\n        borderRadius: 15,\n        overflow: 'hidden',\n        resizeMode: 'contain'\n    },\n    scrollsContainer: {\n        height: '80%',\n        width: '90%',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}