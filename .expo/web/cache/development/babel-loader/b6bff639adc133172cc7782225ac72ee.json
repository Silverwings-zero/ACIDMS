{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/AssignInventoryCreateStationScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport ShadowedBox from 'components/ShadowedBox';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport BottomBlueButton from 'components/BottomBlueButton';\nimport StationModal from 'components/StationModal';\nimport ConfirmInventoryModal from 'components/ConfirmInventoryModal';\nimport update from 'immutability-helper';\nimport { globalInventory } from 'model/Inventory';\nimport { getGlobalStations } from 'model/Station';\n\nvar AssignInventoryCreateStationScreen = function (_React$Component) {\n  _inherits(AssignInventoryCreateStationScreen, _React$Component);\n\n  var _super = _createSuper(AssignInventoryCreateStationScreen);\n\n  function AssignInventoryCreateStationScreen() {\n    var _this;\n\n    _classCallCheck(this, AssignInventoryCreateStationScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      inventorySelected: null,\n      scrollViewHeight: 0,\n      elementHeight: 0,\n      stationModalVisible: false,\n      stations: {},\n      drinks: [],\n      stationSelected: null,\n      totalValue: 0,\n      assignInventoryModalVisible: false\n    };\n    _this._scrollView1 = React.createRef();\n    return _this;\n  }\n\n  _createClass(AssignInventoryCreateStationScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateData();\n    }\n  }, {\n    key: \"onDrinkBoxLayout\",\n    value: function onDrinkBoxLayout(event) {\n      this.setState({\n        elementHeight: event.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"onDrinkBoxPressed\",\n    value: function onDrinkBoxPressed(index) {\n      this.setState({\n        inventorySelected: index\n      });\n\n      this._scrollView1.current.scrollTo({\n        y: this.state.elementHeight * 1.1 * index - 0.3 * this.state.scrollViewHeight\n      });\n    }\n  }, {\n    key: \"onStationModalSave\",\n    value: function onStationModalSave(station) {\n      this.setState(update(this.state, {\n        stations: {\n          $merge: _defineProperty({}, station.key, station)\n        }\n      }));\n      this.setState({\n        stationModalVisible: false\n      });\n    }\n  }, {\n    key: \"onConfirmDelivery\",\n    value: function onConfirmDelivery(station, drink) {\n      this.setState({\n        assignInventoryModalVisible: false,\n        inventorySelected: null\n      });\n      this.updateData();\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var stations = getGlobalStations();\n      var newStations = {};\n      var newTotalValue = 0;\n      stations.map(function (station) {\n        newTotalValue += station.getTotalValue();\n        newStations[station.key] = station;\n      });\n      this.setState({\n        drinks: globalInventory.drinks,\n        stations: newStations,\n        totalValue: newTotalValue\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        style: styles.container,\n        touchable: true,\n        onPress: function onPress() {\n          _this2.setState({\n            inventorySelected: null\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, React.createElement(ConfirmInventoryModal, {\n        drink: this.state.drinks[this.state.inventorySelected],\n        visible: this.state.assignInventoryModalVisible,\n        ref: function ref(m) {\n          _this2.ConfirmInventoryModal = m;\n        },\n        onSave: this.onConfirmDelivery.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }), React.createElement(BottomBlueButton, {\n        text: \"Finish Stations\",\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Manager Dashboard\");\n        },\n        disable: this.state.inventorySelected !== null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }), React.createElement(InventoryTopBox, {\n        inventory: \"Assign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }), React.createElement(StationModal, {\n        visible: this.state.stationModalVisible,\n        onSave: this.onStationModalSave.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.scrollsContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        onLayout: function onLayout(event) {\n          _this2.setState({\n            scrollViewHeight: event.nativeEvent.layout.height\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        ref: this._scrollView1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }\n      }, this.state.drinks.map(function (drink, index) {\n        return React.createElement(DrinkBox, {\n          key: index,\n          drink: drink,\n          onPress: _this2.onDrinkBoxPressed.bind(_this2, index),\n          greyed: _this2.state.inventorySelected !== null && _this2.state.inventorySelected !== index,\n          onLayout: _this2.onDrinkBoxLayout.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 37\n          }\n        });\n      }))), React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, Object.keys(this.state.stations).map(function (stationId, index) {\n        var station = _this2.state.stations[stationId];\n\n        if (station.deleted === true) {\n          return;\n        }\n\n        return React.createElement(StationBox, {\n          key: index,\n          verb: \"Add to\",\n          station: station,\n          inventorySelected: _this2.state.inventorySelected,\n          onPressStats: function onPressStats() {\n            return _this2.props.navigation.navigate(\"Total Inventory Station Overview\", {\n              stationId: station.id\n            });\n          },\n          onAdd: function onAdd() {\n            _this2.ConfirmInventoryModal.inputDrinkAndStation(_this2.state.drinks[_this2.state.inventorySelected], _this2.state.stations[station.key]);\n\n            _this2.setState({\n              assignInventoryModalVisible: true\n            });\n          },\n          enableDelete: true,\n          totalValue: _this2.state.totalValue,\n          onDelete: function onDelete() {\n            _this2.setState(update(_this2.state, {\n              stations: _defineProperty({}, station.key, {\n                $merge: {\n                  deleted: true\n                }\n              })\n            }));\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 37\n          }\n        });\n      }), React.createElement(ShadowedBox, {\n        width: '80%',\n        square: true,\n        margin: 5,\n        touchable: true,\n        onPress: function onPress() {\n          _this2.setState({\n            stationModalVisible: true\n          });\n        },\n        disabled: this.state.inventorySelected !== null,\n        greyed: this.state.inventorySelected !== null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 29\n        }\n      }, React.createElement(View, {\n        style: {\n          aspectRatio: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 33\n        }\n      }, React.createElement(Image, {\n        source: require('assets/add.png'),\n        style: {\n          width: '60%',\n          height: '60%',\n          overflow: 'hidden',\n          resizeMode: 'contain',\n          margin: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 37\n        }\n      }), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 37\n        }\n      }, \"Add Station\")))))));\n    }\n  }]);\n\n  return AssignInventoryCreateStationScreen;\n}(React.Component);\n\nexport { AssignInventoryCreateStationScreen as default };\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f2f2f2',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  boldText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  iconBox: {\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    width: '80%',\n    height: '80%',\n    borderRadius: 15,\n    overflow: 'hidden',\n    resizeMode: 'contain'\n  },\n  scrollsContainer: {\n    height: '68%',\n    width: '90%',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/AssignInventoryCreateStationScreen.js"],"names":["React","ScrollView","ShadowedBox","StationBox","DrinkBox","InventoryTopBox","BottomBlueButton","StationModal","ConfirmInventoryModal","update","globalInventory","getGlobalStations","AssignInventoryCreateStationScreen","state","inventorySelected","scrollViewHeight","elementHeight","stationModalVisible","stations","drinks","stationSelected","totalValue","assignInventoryModalVisible","_scrollView1","createRef","updateData","event","setState","nativeEvent","layout","height","index","current","scrollTo","y","station","$merge","key","drink","newStations","newTotalValue","map","getTotalValue","styles","container","m","onConfirmDelivery","bind","props","navigation","navigate","onStationModalSave","scrollsContainer","width","alignItems","onDrinkBoxPressed","onDrinkBoxLayout","Object","keys","stationId","deleted","id","inputDrinkAndStation","aspectRatio","justifyContent","require","overflow","resizeMode","margin","Component","StyleSheet","create","flex","backgroundColor","boldText","fontSize","fontWeight","iconBox","icon","borderRadius","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport ShadowedBox from 'components/ShadowedBox';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport BottomBlueButton from 'components/BottomBlueButton';\nimport StationModal from 'components/StationModal';\nimport ConfirmInventoryModal from 'components/ConfirmInventoryModal';\nimport update from 'immutability-helper';\nimport { globalInventory } from 'model/Inventory';\nimport { getGlobalStations } from 'model/Station';\n\nexport default class AssignInventoryCreateStationScreen extends React.Component {\n    state = {\n        inventorySelected: null,\n        scrollViewHeight: 0,\n        elementHeight: 0,\n        stationModalVisible: false,\n        stations: {},\n        drinks: [],\n        stationSelected: null,\n        totalValue: 0,\n        assignInventoryModalVisible: false\n    };\n    _scrollView1 = React.createRef();\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    onDrinkBoxLayout(event) {\n        this.setState({elementHeight: event.nativeEvent.layout.height});\n    }\n\n    onDrinkBoxPressed(index) {\n        this.setState({inventorySelected: index});\n        this._scrollView1.current.scrollTo({\n            y: (this.state.elementHeight * 1.1) * index - 0.3 * this.state.scrollViewHeight\n        });\n    }\n\n    onStationModalSave(station) {\n        this.setState(update(this.state, {\n            stations: {\n                $merge: {\n                    [station.key]: station\n                }\n            }\n        }));\n        this.setState({ stationModalVisible: false });\n    }\n\n    onConfirmDelivery(station, drink) {\n        //////\n        // create job\n        //////\n        this.setState({\n            assignInventoryModalVisible: false,\n            inventorySelected: null,\n        });\n        this.updateData();\n    }\n\n    updateData() {\n        var stations = getGlobalStations();\n        var newStations = {};\n        var newTotalValue = 0;\n        stations.map(station => {\n            newTotalValue += station.getTotalValue();\n            newStations[station.key] = station;\n        });\n        this.setState({\n            drinks: globalInventory.drinks,\n            stations: newStations,\n            totalValue: newTotalValue\n        });\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                style={styles.container}\n                touchable\n                onPress={() => {\n                    this.setState({ inventorySelected: null });\n                }}>\n                <ConfirmInventoryModal\n                    drink={this.state.drinks[this.state.inventorySelected]}\n                    visible={this.state.assignInventoryModalVisible}\n                    ref={m => {this.ConfirmInventoryModal = m}}\n                    onSave={this.onConfirmDelivery.bind(this)}/>\n                <BottomBlueButton\n                    text={\"Finish Stations\"}\n                    onPress={() => this.props.navigation.navigate(\"Manager Dashboard\")}\n                    disable={this.state.inventorySelected !== null} />\n                <InventoryTopBox inventory={\"Assign\"} />\n                <StationModal\n                    visible={this.state.stationModalVisible}\n                    onSave={this.onStationModalSave.bind(this)} />\n                <View style={styles.scrollsContainer}>\n                    <View\n                        style={{ width: '50%' }}\n                        onLayout={(event) => {\n                            this.setState({ scrollViewHeight: event.nativeEvent.layout.height });\n                        }}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}\n                            ref={this._scrollView1}>\n                            {this.state.drinks.map((drink, index) => {\n                                return (\n                                    <DrinkBox\n                                        key={index}\n                                        drink={drink}\n                                        onPress={this.onDrinkBoxPressed.bind(this, index)}\n                                        greyed={this.state.inventorySelected !== null && this.state.inventorySelected !== index}\n                                        onLayout={this.onDrinkBoxLayout.bind(this)}/>\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                    <View style={{ width: '50%' }}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}>\n                            {Object.keys(this.state.stations).map((stationId, index) => {\n                                var station = this.state.stations[stationId];\n                                if (station.deleted === true) {\n                                    return;\n                                }\n                                return (\n                                    <StationBox\n                                        key={index}\n                                        verb={\"Add to\"}\n                                        station={station}\n                                        inventorySelected={this.state.inventorySelected}\n                                        onPressStats={() => this.props.navigation.navigate(\"Total Inventory Station Overview\", { stationId: station.id })}\n                                        onAdd={() => {\n                                            this.ConfirmInventoryModal.inputDrinkAndStation(\n                                                this.state.drinks[this.state.inventorySelected],\n                                                this.state.stations[station.key]\n                                            );\n                                            this.setState({ assignInventoryModalVisible: true });\n                                        }}\n                                        enableDelete={true}\n                                        totalValue={this.state.totalValue}\n                                        onDelete={() => {\n                                            this.setState(update(\n                                                this.state,\n                                                {\n                                                    stations: {\n                                                        [station.key]: {\n                                                            $merge: {\n                                                                deleted: true\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            ));\n                                        }}\n                                    />\n                                );\n                            })}\n                            <ShadowedBox\n                                width={'80%'}\n                                square\n                                margin={5}\n                                touchable\n                                onPress={() => {\n                                    this.setState({ stationModalVisible: true });\n                                }}\n                                disabled={this.state.inventorySelected !== null}\n                                greyed={this.state.inventorySelected !== null}>\n                                <View style={{\n                                    aspectRatio: 1,\n                                    alignItems: 'center',\n                                    justifyContent: 'center',\n                                }}>\n                                    <Image\n                                        source={require('assets/add.png')}\n                                        style={{\n                                            width: '60%',\n                                            height: '60%',\n                                            overflow: 'hidden',\n                                            resizeMode: 'contain',\n                                            margin: 10\n                                        }} />\n                                    <Text>Add Station</Text>\n                                </View>\n                            </ShadowedBox>\n                        </ScrollView>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#f2f2f2',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n    },\n    boldText: {\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    iconBox: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    icon: {\n        width: '80%',\n        height: '80%',\n        borderRadius: 15,\n        overflow: 'hidden',\n        resizeMode: 'contain'\n    },\n    scrollsContainer: {\n        height: '68%',\n        width: '90%',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}