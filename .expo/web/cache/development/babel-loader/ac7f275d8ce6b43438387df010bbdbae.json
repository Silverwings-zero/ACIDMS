{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/ServerConfirmInventoryScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport ConfirmInventoryModal from 'components/ConfirmInventoryModal';\nimport { getGlobalStations } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from \"../model/Job\";\n\nvar ServerConfirmInventoryScreen = function (_React$Component) {\n  _inherits(ServerConfirmInventoryScreen, _React$Component);\n\n  var _super = _createSuper(ServerConfirmInventoryScreen);\n\n  function ServerConfirmInventoryScreen() {\n    var _this;\n\n    _classCallCheck(this, ServerConfirmInventoryScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      inventorySelected: null,\n      scrollViewHeight: 0,\n      elementHeight: 0,\n      stationModalVisible: false,\n      stations: {},\n      drinks: [],\n      stationSelected: null,\n      totalValue: 0,\n      confirmInventoryModalVisible: false\n    };\n    _this._scrollView1 = React.createRef();\n    return _this;\n  }\n\n  _createClass(ServerConfirmInventoryScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateData();\n    }\n  }, {\n    key: \"onDrinkBoxLayout\",\n    value: function onDrinkBoxLayout(event) {\n      this.setState({\n        elementHeight: event.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"onDrinkBoxPressed\",\n    value: function onDrinkBoxPressed(index) {\n      this.setState({\n        inventorySelected: index\n      });\n\n      this._scrollView1.current.scrollTo({\n        y: this.state.elementHeight * 1.1 * index - 0.3 * this.state.scrollViewHeight\n      });\n    }\n  }, {\n    key: \"onConfirmInvModalSave\",\n    value: function onConfirmInvModalSave(drink) {\n      this.setState({\n        confirmInventoryModalVisible: false\n      });\n      Job.updateJobStaus(drink, this.state.curStation.key, this.state.pairItems, \"Confirmed\");\n      this.state.curStation.updateDrink(drink);\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var stations = getGlobalStations();\n      var newStations = {};\n      var newTotalValue = 0;\n      stations.map(function (station) {\n        newTotalValue += station.getTotalValue();\n        newStations[station.key] = station;\n      });\n      this.setState({\n        drinks: globalInventory.drinks,\n        pairItems: globalInventory.pairItems,\n        stations: newStations,\n        totalValue: newTotalValue\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        style: styles.container,\n        touchable: true,\n        onPress: function onPress() {\n          return _this2.setState({\n            inventorySelected: null\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, React.createElement(ConfirmInventoryModal, {\n        ref: function ref(m) {\n          _this2.confirmInventoryModal = m;\n        },\n        serverMode: true,\n        visible: this.state.confirmInventoryModalVisible,\n        onSave: this.onConfirmInvModalSave.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }\n      }), React.createElement(InventoryTopBox, {\n        inventory: \"Confirm\",\n        touchable: true,\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Return Inventory Detailed Data\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.scrollsContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        onLayout: function onLayout(event) {\n          return _this2.setState({\n            scrollViewHeight: event.nativeEvent.layout.height\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        ref: this._scrollView1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, this.state.drinks.map(function (drink, index) {\n        return React.createElement(DrinkBox, {\n          key: index,\n          onPress: _this2.onDrinkBoxPressed.bind(_this2, index),\n          drink: drink,\n          greyed: _this2.state.inventorySelected !== null && _this2.state.inventorySelected !== index,\n          onLayout: _this2.onDrinkBoxLayout.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 37\n          }\n        });\n      }))), React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, Object.keys(this.state.stations).map(function (stationId, index) {\n        var station = _this2.state.stations[stationId];\n\n        if (station.deleted === true) {\n          return;\n        }\n\n        return React.createElement(StationBox, {\n          verb: \"Return to\",\n          key: index,\n          station: station,\n          totalValue: _this2.state.totalValue,\n          inventorySelected: _this2.state.inventorySelected,\n          onPressStats: function onPressStats() {\n            return _this2.props.navigation.navigate(\"Total Inventory Station Overview\", {\n              stationId: station.id\n            });\n          },\n          onAdd: function onAdd() {\n            _this2.setState({\n              confirmInventoryModalVisible: true,\n              curStation: station\n            });\n\n            _this2.confirmInventoryModal.inputDrinkAndStation(_this2.state.drinks[_this2.state.inventorySelected], station.name, _this2.state.pairItems);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 37\n          }\n        });\n      })))));\n    }\n  }]);\n\n  return ServerConfirmInventoryScreen;\n}(React.Component);\n\nexport { ServerConfirmInventoryScreen as default };\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f2f2f2',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  boldText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  iconBox: {\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    width: '80%',\n    height: '80%',\n    borderRadius: 15,\n    overflow: 'hidden',\n    resizeMode: 'contain'\n  },\n  scrollsContainer: {\n    height: '80%',\n    width: '90%',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/ServerConfirmInventoryScreen.js"],"names":["React","ScrollView","StationBox","DrinkBox","InventoryTopBox","ConfirmInventoryModal","getGlobalStations","globalInventory","Job","ServerConfirmInventoryScreen","state","inventorySelected","scrollViewHeight","elementHeight","stationModalVisible","stations","drinks","stationSelected","totalValue","confirmInventoryModalVisible","_scrollView1","createRef","updateData","event","setState","nativeEvent","layout","height","index","current","scrollTo","y","drink","updateJobStaus","curStation","key","pairItems","updateDrink","newStations","newTotalValue","map","station","getTotalValue","styles","container","m","confirmInventoryModal","onConfirmInvModalSave","bind","props","navigation","navigate","scrollsContainer","width","alignItems","onDrinkBoxPressed","onDrinkBoxLayout","Object","keys","stationId","deleted","id","inputDrinkAndStation","name","Component","StyleSheet","create","flex","backgroundColor","justifyContent","boldText","fontSize","fontWeight","iconBox","icon","borderRadius","overflow","resizeMode","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport ConfirmInventoryModal from 'components/ConfirmInventoryModal';\nimport { getGlobalStations } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from '../model/Job';\n\nexport default class ServerConfirmInventoryScreen extends React.Component {\n    state = {\n        inventorySelected: null,\n        scrollViewHeight: 0,\n        elementHeight: 0,\n        stationModalVisible: false,\n        stations: {},\n        drinks: [],\n        stationSelected: null,\n        totalValue: 0,\n        confirmInventoryModalVisible: false\n    };\n\n     _scrollView1 = React.createRef();\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    onDrinkBoxLayout(event) {\n        this.setState({elementHeight: event.nativeEvent.layout.height});\n    }\n\n    onDrinkBoxPressed(index) {\n        this.setState({inventorySelected: index});\n        this._scrollView1.current.scrollTo({\n            y: (this.state.elementHeight * 1.1) * index - 0.3 * this.state.scrollViewHeight\n        });\n    }\n\n    onConfirmInvModalSave(drink) {\n        this.setState({confirmInventoryModalVisible: false});\n        Job.updateJobStaus(drink, this.state.curStation.key, this.state.pairItems, \"Confirmed\");\n        this.state.curStation.updateDrink(drink);\n        // update status of job\n        // update inventory of station\n    }\n\n    updateData() {\n        var stations = getGlobalStations();\n        var newStations = {};\n        var newTotalValue = 0;\n        stations.map(station => {\n            newTotalValue += station.getTotalValue();\n            newStations[station.key] = station;\n        });\n        this.setState({\n            drinks: globalInventory.drinks,\n            pairItems: globalInventory.pairItems,\n            stations: newStations,\n            totalValue: newTotalValue\n        });\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                style={styles.container}\n                touchable\n                onPress={() => this.setState({inventorySelected: null})}>\n                <ConfirmInventoryModal\n                    ref={m => {this.confirmInventoryModal = m}}\n                    serverMode={true}\n                    visible={this.state.confirmInventoryModalVisible} \n                    onSave={this.onConfirmInvModalSave.bind(this)} />\n                <InventoryTopBox\n                    inventory={\"Confirm\"}\n                    touchable\n                    onPress={() => this.props.navigation.navigate(\"Return Inventory Detailed Data\")} />\n                <View style={styles.scrollsContainer}>\n                    <View\n                        style={{width: '50%'}}\n                        onLayout={(event) => this.setState({scrollViewHeight: event.nativeEvent.layout.height})}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}\n                            ref={this._scrollView1}>\n                            {this.state.drinks.map((drink, index) => {\n                                return (\n                                    <DrinkBox\n                                        key={index}\n                                        onPress={this.onDrinkBoxPressed.bind(this, index)}\n                                        drink={drink}\n                                        greyed={this.state.inventorySelected !== null && this.state.inventorySelected !== index}\n                                        onLayout={this.onDrinkBoxLayout.bind(this)}/>\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                    <View style={{width: '50%'}}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}>\n                            {Object.keys(this.state.stations).map((stationId, index) => {\n                                var station = this.state.stations[stationId];\n                                if (station.deleted === true) {\n                                    return;\n                                }\n                                return (\n                                    <StationBox\n                                        verb={\"Return to\"}\n                                        key={index}\n                                        station={station}\n                                        totalValue={this.state.totalValue}\n                                        inventorySelected={this.state.inventorySelected}\n                                        onPressStats={() => this.props.navigation.navigate(\"Total Inventory Station Overview\", { stationId: station.id })}\n                                        onAdd={() => {\n                                            this.setState({\n                                                confirmInventoryModalVisible: true,\n                                                curStation: station\n                                            });\n                                            this.confirmInventoryModal.inputDrinkAndStation(\n                                                this.state.drinks[this.state.inventorySelected],\n                                                station.name,\n                                                this.state.pairItems\n                                            );\n                                        }}\n                                        />\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#f2f2f2',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n    },\n    boldText: {\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    iconBox: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    icon: {\n        width: '80%',\n        height: '80%',\n        borderRadius: 15,\n        overflow: 'hidden',\n        resizeMode: 'contain'\n    },\n    scrollsContainer: {\n        height: '80%',\n        width: '90%',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}