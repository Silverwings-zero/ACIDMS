{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/RunnerRequestInventoryScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport RequestInventoryModal from 'components/RequestInventoryModal';\nimport Station, { getGlobalStations, getGlobalStation } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from \"../model/Job\";\n\nvar RunnerRequestInventoryScreen = function (_React$Component) {\n  _inherits(RunnerRequestInventoryScreen, _React$Component);\n\n  var _super = _createSuper(RunnerRequestInventoryScreen);\n\n  function RunnerRequestInventoryScreen() {\n    var _this;\n\n    _classCallCheck(this, RunnerRequestInventoryScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      inventorySelected: null,\n      scrollViewHeight: 0,\n      elementHeight: 0,\n      stationModalVisible: false,\n      station: new Station(),\n      drinks: [],\n      pairItems: [],\n      totalValue: 0,\n      requestInventoryModalVisible: false\n    };\n    _this._scrollView1 = React.createRef();\n    return _this;\n  }\n\n  _createClass(RunnerRequestInventoryScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateData();\n    }\n  }, {\n    key: \"onDrinkBoxLayout\",\n    value: function onDrinkBoxLayout(event) {\n      this.setState({\n        elementHeight: event.nativeEvent.layout.height\n      });\n    }\n  }, {\n    key: \"onDrinkBoxPressed\",\n    value: function onDrinkBoxPressed(index) {\n      this.setState({\n        inventorySelected: index\n      });\n\n      this._scrollView1.current.scrollTo({\n        y: this.state.elementHeight * 1.1 * index - 0.3 * this.state.scrollViewHeight\n      });\n    }\n  }, {\n    key: \"onRequestInvModalSave\",\n    value: function onRequestInvModalSave(drink) {\n      var drinkToUpdate = this.state.drinks[this.state.inventorySelected];\n      drinkToUpdate.subtract(drink);\n      globalInventory.updateDrinkQuantity(drinkToUpdate);\n      Job.createNewJob(drink, this.state.station.key, this.state.pairItems, \"Transfer\");\n      this.setState({\n        requestInventoryModalVisible: false,\n        inventorySelected: null\n      });\n    }\n  }, {\n    key: \"updateData\",\n    value: function updateData() {\n      var stations = getGlobalStations();\n      var newStations = {};\n      var newTotalValue = 0;\n      stations.map(function (station) {\n        newTotalValue += station.getTotalValue();\n        newStations[station.key] = station;\n      });\n      this.setState({\n        station: getGlobalStation(this.props.route.params.stationId),\n        drinks: globalInventory.drinks,\n        totalValue: newTotalValue\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(TouchableOpacity, {\n        activeOpacity: 1,\n        style: styles.container,\n        touchable: true,\n        onPress: function onPress() {\n          return _this2.setState({\n            inventorySelected: null\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, React.createElement(RequestInventoryModal, {\n        ref: function ref(m) {\n          _this2.requestInventoryModal = m;\n        },\n        visible: this.state.requestInventoryModalVisible,\n        onSave: this.onRequestInvModalSave.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }), React.createElement(InventoryTopBox, {\n        inventory: \"Request\",\n        touchable: true,\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Return Inventory Detailed Data\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.scrollsContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        onLayout: function onLayout(event) {\n          return _this2.setState({\n            scrollViewHeight: event.nativeEvent.layout.height\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        ref: this._scrollView1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }\n      }, this.state.drinks.map(function (drink, index) {\n        return React.createElement(DrinkBox, {\n          key: index,\n          onPress: _this2.onDrinkBoxPressed.bind(_this2, index),\n          drink: drink,\n          greyed: _this2.state.inventorySelected !== null && _this2.state.inventorySelected !== index,\n          onLayout: _this2.onDrinkBoxLayout.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 37\n          }\n        });\n      }))), React.createElement(View, {\n        style: {\n          width: '50%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        contentContainerStyle: {\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }\n      }, React.createElement(StationBox, {\n        verb: \"Request for\",\n        station: this.state.station,\n        totalValue: this.state.totalValue,\n        inventorySelected: this.state.inventorySelected,\n        onPressStats: function onPressStats() {\n          _this2.setState({\n            availableDrinkType: _this2.state.station.drinks.map(function (drink) {\n              return drink.name;\n            })\n          });\n        },\n        onAdd: function onAdd() {\n          _this2.setState({\n            requestInventoryModalVisible: true\n          });\n\n          _this2.requestInventoryModal.inputDrinkAndStation(_this2.state.drinks[_this2.state.inventorySelected], _this2.state.station.name, _this2.state.pairItems);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }\n      })))));\n    }\n  }]);\n\n  return RunnerRequestInventoryScreen;\n}(React.Component);\n\nexport { RunnerRequestInventoryScreen as default };\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f2f2f2',\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  boldText: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  iconBox: {\n    width: '100%',\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    width: '80%',\n    height: '80%',\n    borderRadius: 15,\n    overflow: 'hidden',\n    resizeMode: 'contain'\n  },\n  scrollsContainer: {\n    height: '80%',\n    width: '90%',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/Terminator/Desktop/Spring2021/CS4440/ACIDMS/screens/RunnerRequestInventoryScreen.js"],"names":["React","ScrollView","StationBox","DrinkBox","InventoryTopBox","RequestInventoryModal","Station","getGlobalStations","getGlobalStation","globalInventory","Job","RunnerRequestInventoryScreen","state","inventorySelected","scrollViewHeight","elementHeight","stationModalVisible","station","drinks","pairItems","totalValue","requestInventoryModalVisible","_scrollView1","createRef","updateData","event","setState","nativeEvent","layout","height","index","current","scrollTo","y","drink","drinkToUpdate","subtract","updateDrinkQuantity","createNewJob","key","stations","newStations","newTotalValue","map","getTotalValue","props","route","params","stationId","styles","container","m","requestInventoryModal","onRequestInvModalSave","bind","navigation","navigate","scrollsContainer","width","alignItems","onDrinkBoxPressed","onDrinkBoxLayout","availableDrinkType","name","inputDrinkAndStation","Component","StyleSheet","create","flex","backgroundColor","justifyContent","boldText","fontSize","fontWeight","iconBox","icon","borderRadius","overflow","resizeMode","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Image } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport StationBox from 'components/StationBox';\nimport DrinkBox from 'components/DrinkBox';\nimport InventoryTopBox from 'components/InventoryTopBox';\nimport RequestInventoryModal from 'components/RequestInventoryModal';\nimport Station, { getGlobalStations, getGlobalStation } from 'model/Station';\nimport { globalInventory } from 'model/Inventory';\nimport Job from '../model/Job';\n\nexport default class RunnerRequestInventoryScreen extends React.Component {\n    state = {\n        inventorySelected: null,\n        scrollViewHeight: 0,\n        elementHeight: 0,\n        stationModalVisible: false,\n        station: new Station(),\n        drinks: [],\n        pairItems: [],\n        totalValue: 0,\n        requestInventoryModalVisible: false\n    };\n\n     _scrollView1 = React.createRef();\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    onDrinkBoxLayout(event) {\n        this.setState({elementHeight: event.nativeEvent.layout.height});\n    }\n\n    onDrinkBoxPressed(index) {\n        this.setState({inventorySelected: index});\n        this._scrollView1.current.scrollTo({\n            y: (this.state.elementHeight * 1.1) * index - 0.3 * this.state.scrollViewHeight\n        });\n    }\n\n    onRequestInvModalSave(drink) {\n        var drinkToUpdate = this.state.drinks[this.state.inventorySelected];\n        drinkToUpdate.subtract(drink);\n        globalInventory.updateDrinkQuantity(drinkToUpdate);\n        Job.createNewJob(drink, this.state.station.key, this.state.pairItems, \"Transfer\");\n        this.setState({\n            requestInventoryModalVisible: false,\n            inventorySelected: null,\n        });\n    }\n\n    updateData() {\n        var stations = getGlobalStations();\n        var newStations = {};\n        var newTotalValue = 0;\n        stations.map(station => {\n            newTotalValue += station.getTotalValue();\n            newStations[station.key] = station;\n        });\n        this.setState({\n            station: getGlobalStation(this.props.route.params.stationId),\n            drinks: globalInventory.drinks,\n            totalValue: newTotalValue\n        });\n    }\n\n    render() {\n        return (\n            <TouchableOpacity\n                activeOpacity={1}\n                style={styles.container}\n                touchable\n                onPress={() => this.setState({inventorySelected: null})}>\n                <RequestInventoryModal\n                    ref={m => {this.requestInventoryModal = m}}\n                    visible={this.state.requestInventoryModalVisible} \n                    onSave={this.onRequestInvModalSave.bind(this)} />\n                <InventoryTopBox inventory={\"Request\"} touchable onPress={() => this.props.navigation.navigate(\"Return Inventory Detailed Data\")}/>\n                <View style={styles.scrollsContainer}>\n                    <View\n                        style={{width: '50%'}}\n                        onLayout={(event) => this.setState({scrollViewHeight: event.nativeEvent.layout.height})}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}\n                            ref={this._scrollView1}>\n                            {this.state.drinks.map((drink, index) => {\n                                return (\n                                    <DrinkBox\n                                        key={index}\n                                        onPress={this.onDrinkBoxPressed.bind(this, index)}\n                                        drink={drink}\n                                        greyed={this.state.inventorySelected !== null && this.state.inventorySelected !== index}\n                                        onLayout={this.onDrinkBoxLayout.bind(this)}/>\n                                );\n                            })}\n                        </ScrollView>\n                    </View>\n                    <View style={{width: '50%'}}>\n                        <ScrollView\n                            showsVerticalScrollIndicator={false}\n                            contentContainerStyle={{\n                                alignItems: 'center'\n                            }}>\n                            <StationBox\n                                verb={\"Request for\"}\n                                station={this.state.station}\n                                totalValue={this.state.totalValue}\n                                inventorySelected={this.state.inventorySelected}\n                                onPressStats={() => {\n                                    this.setState({\n                                        availableDrinkType: this.state.station.drinks.map(drink => drink.name)\n                                    });\n                                }}\n                                onAdd={() => {\n                                    this.setState({\n                                        requestInventoryModalVisible: true,\n                                    });\n                                    this.requestInventoryModal.inputDrinkAndStation(\n                                        this.state.drinks[this.state.inventorySelected],\n                                        this.state.station.name,\n                                        this.state.pairItems\n                                    )\n                                }}\n                                />\n                        </ScrollView>\n                    </View>\n                </View>\n            </TouchableOpacity>\n        );\n    }\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#f2f2f2',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n    },\n    boldText: {\n        fontSize: 18,\n        fontWeight: 'bold'\n    },\n    iconBox: {\n        width: '100%',\n        height: '100%',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    icon: {\n        width: '80%',\n        height: '80%',\n        borderRadius: 15,\n        overflow: 'hidden',\n        resizeMode: 'contain'\n    },\n    scrollsContainer: {\n        height: '80%',\n        width: '90%',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}